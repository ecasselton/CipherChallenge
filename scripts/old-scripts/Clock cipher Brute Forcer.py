alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
            'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
characters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
            'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '#', '+']
key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

blocks = []

cipher = 0
plain = 0
pos = 0


ciphertext
plaintext = 'tentialstopthetripwireoptionisalsodeprecatedsinceitismorelikelythattheexpl'

def go(_list_, index, aim):
    num = 0
    while index % len(_list_) != aim:
        index += 1
        num += 1
    return num

def get_key(ciphertext, plaintext):
    global num, key, pos, plain, cipher
    ciphertext = [str(x) for x in str(ciphertext)]
    plaintext = [str(x) for x in str(plaintext)]
    #print(len(key))
    for each in range(len(ciphertext)):
        thing = go(alphabet, plain, each)
        plain = (plain + thing) % 26
        cipher = (cipher + thing) % 28
        if ciphertext[each].lower() in characters:
            if key[(cipher + (cipher - plain)) % 28] == 0 and ciphertext[each].lower() not in key:
                key[cipher + (cipher - plain) % 28] = characters[cipher].lower()
            else:
                print(key)
                failed = True
                pos += 1
                break
    if failed == False:
        print(key)
        failed = True
    key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

for letter in range(len(ciphertext) - len(plaintext) - 1):
    blocks.append(ciphertext[letter:letter + len(plaintext)])

print(len(blocks))

for block in range(len(blocks)):
    get_key(blocks[block], plaintext)

